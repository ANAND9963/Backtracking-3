class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        boolean[][] grid = new boolean[n][n];
        backtrack(grid, 0, result);
        return result;
    }

    private void backtrack(boolean[][] grid, int r, List<List<String>> result) {
        if (r == grid.length) {
            List<String> solution = new ArrayList<>();
            for (int i = 0; i < grid.length; i++) {
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < grid[0].length; j++) {
                    if (grid[i][j]) {
                        sb.append('Q');
                    } else {
                        sb.append('.');
                    }
                }
                solution.add(sb.toString());
            }
            result.add(solution);
            return;
        }

        for (int c = 0; c < grid[0].length; c++) {
            if (isSafe(grid, r, c)) {
                grid[r][c] = true;
                backtrack(grid, r + 1, result);
                grid[r][c] = false; // backtrack
            }
        }
    }

    private boolean isSafe(boolean[][] grid, int r, int c) {
        // Check column
        for (int i = 0; i < r; i++) {
            if (grid[i][c]) {
                return false;
            }
        }

        // Check upper-left diagonal
        for (int i = r, j = c; i >= 0 && j >= 0; i--, j--) {
            if (grid[i][j]) {
                return false;
            }
        }

        // Check upper-right diagonal
        for (int i = r, j = c; i >= 0 && j < grid.length; i--, j++) {
            if (grid[i][j]) {
                return false;
            }
        }

        return true;
    }
}
